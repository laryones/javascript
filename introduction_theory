Переменная - может изменяться
Константа - что не может изменяться 

Переменная - именованная ячейка памяти

let -  нужна для объявления переменных
Const - для констант 
var=let
Let age;

Имя переменной должно начинаться только с буквы, знака бакса, _, если нарушить - то будет ошибка

Тип число 

Number - число
 NaN -  ошибка вычисления 
inf=Infinity. - значение бесконечности 
Let inf = 20 / 0; 

BigInt - сюда можно засунуть большое число очень 


String - строка
Если цифра в кавычках - то это строка
Ковычки открывать и закрывать одним типом 

\n - для перевода текста на новую строку 
\’’ - для заключения в кавычки внутри строки 
\\ - двойной слеш в качестве текста 
\t -  знак табуляции


Boolean 
Let iamhuman = false;

Null -  пустое значение, но это не значит 0; это обозначит неизвестность

Undefined - когда переменная была объявлена, но значения не было установлено 

Null -это ничего, но есть значение
А undefined -  когда переменная есть. Но нет значения 

Object - представление любого объекта из реальности в компьютерном представлении
Нечто большой контейнер - может содержать в себе все типы и внутренние объекты также
Объект имеет включенный контейнер с переменными и характеристиками 

 Let monitor = {
	name: ‘apple’,
	weight: 3.3,
	resolution: 25,
	price: 1000,
	rotate: false
};


Symbol -  тип данных для создания уникальных значений 



Массив в JS
одномерные, двухмерные и тж
Создается с помощью [ ] 

В одномерном массиве все выглядит как строка со значениями, где для каждого значения выделена своя ячейка

Для доступа к ячейке необходимо также использовать [ ], где цифра в скобке будет порядковый номер ячейки в массиве - называется индексом 

Счет ячеек идет с 0

name[0];
Если в массиве запрашиваем ячейку которой не существует, ей присваевается переменная undefined


Двумерный массив - матрица
Разница лишь в том, что это массив в массиве, выглядит как таблица умножения 

Пример создания двумерного массива
Name = [[‘name’, ‘name’, name’], [‘name’, ‘name’, ‘name’]];

При запросе одного индекса мы получим лишь массив, и нужно обращаться индексу ячейки выбранного массива

Пример - name[1][4];



 Трехмерные массивы - 
Массив в массиве в массиве

Пример такого массива 
Name = [[[‘name’, ‘name’ name’], [‘name’, ‘name’, ‘name’]], [[‘name’, ‘name’,’name’], [‘name’,’name’,’name’]]]


Пример - name[1][4][4];


Узнать кол-во / константу массива - name.length




Операторы 
Унарные и Бинарные 

= оператор равнения 
для сложения двух чисел
- вычитание 
Умножение
/ деление
** возведение в степень (умножение числа на самого себя в несколько раз)
% остаток от деления ( 28%5=3). - берем левое значение и начинаем считать вниз и искать значение которое на него делится без остатка (28 = 25/5 = 28-25= 3)


Приоритет операторов - как и в математике - сначала умножение и деление, потом вычитание и сложение

Для приоритета нужно заключить нужную формулу в ( )


Операторы с одним числом

для конвертации в число  (например +5) (+true)
- для того чтобы сделать число отрицательным 
++ оператор инкремента. Используется с переменными и не может использоваться просто со значениями 
++a  -префиксный инкремент - делать увеличение значения на единицу и сразу возвращает результат, при этом значение изменяется сразу и в переменной 
(a=5) ++a = 6, a=6

a++  инкримент после переменной, постфиксный инкремент 
а++ будет показывать 5, но а=6

—a, a— Оператор  дикримента. Тоже самое только с вычитанием на единицу 


можно использовать и со строками 
 ‘a’+’b’=‘ab’;
Если число сложить со строкой, то они становятся строкой оба в результате 

Остальные операторы будут лишь пытаться строку преобразовать к числу 


> оператор больше, результатом будет булевое значение 

Если сравнивать строки, то у каждой буквы есть порядковый номер с которым будет сманиваться  


< оператор меньше 
>= оператор больше или равно 
<= меньше или равно 
==  оператор равенства 

===  оператор строго равенства (сравнивается еще или тип данных)

+=  оператор сокращенного присваивания для изменения значения в переменной 
A = 5;
5
A += 5;
10






Условный оператор IF

If -   условие или действие 

let a = 0 
undefined
let liked = true;
undefined
if (liked)
    a = 5;

 Особенности
False можно допустить к положительному решению при сравнению путем  === или  !

If (!liked)
    A = 5;
5
A;
5

Выполняется только одно действие после условия
Если нужно выполнить два действия, то нужно использовать блоки
if (true) {
    a = 5;
    a = a + 10; 
}
15


Условия при котоом условие не выполняется и в силу вступает альтернативный вариант при отрицательном значении 
Добавляется слово - ИНАЧЕ -  else. - то есть альтернативное действие 

a=10
if (a > 50000)
    a = a - 50000; else 
        a = a - 5;
5

Если нужно несколько действий перечислить, то пишем со скобками 
a = 10
10
if (a > 10000) {
    a = a - 10000; 
} else {
    a = a - 5; a = a + 5;
}
10

Можно также вкладывать условия до бесконечности друг в друга
a = 10
10
if (a > 1000) {
    a = a - 1000;
   if (a >= 500) {
       a = a - 500;
   }
} else { 
    a = a - 5; 
}
5

Если условий несколько, и первое срабатывает - то остальные условия не выполняются 

Else if -  употребляется если ранее поставленные условия не сработали 

 a = 100 
100
if ( a > 1000) {
    a = a - 1000;
} else if (a > 500) {
    a = a - 500;
} else if (a > 200) {
    a = a - 200;
} else { 
    a = a - 50;
}
50



Конструкция Switch
Альтернатива if

let cm = 15
switch (cm){
    case 5:
console.log('small');
break;
    case 15:
console.log('medium');
break;
    case 20:
console.log('huge');
break;
}
medium

Switch  ставит условие, Break - говорит что если условие подошло - то дальше выполнять проверку не нужно.

А альтернативу Else if выполняет Default - что делать если ни одно условие не подошло

Если нужно чтобы выполнилось любое из условий независимо, то BREAK ставим в конце перечня 

let rent = 10000
switch (rent){
    case 15000:
    case 20000:
    case 12000:
        console.log('consurlations');
        break;
    default:
        console.log('don\'t have here');
break;
}

Тоже самое можно проделать и со строками, однако есть нюанс, тут есть регистрочувствительность, и сравнение происходит под оператором строгого сравнения, а значит нельзя миксовать типы данных.

Таким же макаром можно осуществлять болевые сравнения, в действии нужно будет привести сравнения просто) 




Тернарный оператор 

Работает с тремя значениями 

let a = 5 > 0 ? 1 : -1; 

Где 5 > 0 - условие
? 1 -  в случае тру
-1 в случае фолс

Чтобы заставить тернарного оператора выполняться отдельно от других операторов, его нужно добавить в скобки. Например: a = 1 + 1 + ( 4 > 5 ? 1 : 2 );

Также можно работать и со строками

 Выражения после ? И : не обязаны быть выражениями только, там могут быть и переменные

При желании можно сделать else if на случай ложного варианта 

a = 3 
3
a = 3 === 1? a : (a === 2? 100 : 200 );
200

(Выражение в кавычках и есть условие else if)




ЦИКЛЫ 
Циклы со счетчиков , то есть циклы FOR
это повторение каких либо действий

For ( начальное значение счетчика; условие продолжение ;  шаг счетчика) {
Тело цикла;
}

for(let sport = 1; sport <=5; sport = sport + 1) {
    console.log('Сесть');
    console.log('Встать');
}

Для добавления динамики в тело цикла можно добавить переменную счетчика к примеру, например 
console.log(‘Сесть’ + sport );

Итерация - проход тела цикла 


Циклы также используются для обхода массивов

for (let terp = 0; terp < 3; terp = terp + 1) {
    console.log(names[terp] +  ' в шоке от того, что Грабитель отобрал у него ' + money[terp] + ' долларов');
cash =  cash + money [terp];
money[terp] = 0;
}



Узнать длину / константу массива - name.length

Циклы можно вкладывать друг в друга
Можно обходить массивы любой вложенности

Добавлять в массив значения можно при помощи push

 При обходе массива нужно следить за индексом


Циклы с предусловием - WHILE
То есть есть предусловие, при невыполнении которого не будет выполняться и сам цикл

counter = 0;
sum = 0;
while (sum < 5) {
    sum = sum + 0.5;
    counter = counter + 1;
}
console.log('Finished in ' + counter + ' iterations');

Цикл for:
всегда имеет счетчик
Количество итераций указано явно

Цикл while:
нет обязательного счетчика
Количество итераций зависит от условия 


Циклы с постусловием -   DO WHILE (do)
то есть условие будет выполняться всегда, независимо от условия.

Do {
	тело цикла;
	} while (условие);




BREAK/CONTINUE
Break -  заканчивает выполнение цикла 
Continue - не прекращает выполнение цикла, а переходит к следующей итерации 











ECMAScript 5
стандарт, фундамент на котором были построены другие языки 
(Релиз 2009 года)

ES6 - 2015
ES7,8,9 - 2016…
ES10 -2019




































